[{"/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/index.js":"1","/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/App.js":"2","/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/Header.js":"3","/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/Cards.js":"4","/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/Scoreboard.js":"5","/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/MessageBoard.js":"6"},{"size":223,"mtime":1611058328000,"results":"7","hashOfConfig":"8"},{"size":221,"mtime":1611058326000,"results":"9","hashOfConfig":"8"},{"size":259,"mtime":1618595879000,"results":"10","hashOfConfig":"8"},{"size":5150,"mtime":1618595832000,"results":"11","hashOfConfig":"8"},{"size":429,"mtime":1618594017000,"results":"12","hashOfConfig":"8"},{"size":171,"mtime":1618595890000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"17ux7ds",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/index.js",[],["29","30"],"/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/App.js",[],"/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/Header.js",[],"/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/Cards.js",["31"],"//components\nimport React, { useState, useEffect } from 'react';\nimport ScoreBoard from './Scoreboard.js';\nimport MessageBoard from './MessageBoard.js';\n\n// imgs\nimport boot from '../imgs/boot.png'; import butterfly from '../imgs/butterfly.png';\nimport chick from '../imgs/chick.png'; import clover from '../imgs/clover.png';\nimport dragonfly from '../imgs/dragonfly.png'; import fan from '../imgs/fan.png';\nimport ladybird from '../imgs/ladybird.png'; import leaf from '../imgs/leaf.png';\nimport moth from '../imgs/moth.png'; import rainbow from '../imgs/rainbow.png';\nimport rose from '../imgs/rose.png'; import sprout from '../imgs/sprout.png';\nimport strawberry from '../imgs/strawberry.png'; import sun from '../imgs/sun.png';\nimport sunflower from '../imgs/sunflower.png'; import worm from '../imgs/worm.png';\n\nexport default function CardContainer() {\n    const [cards, setCards] = useState({\n        boot: false, butterfly: false, chick: false, clover: false,\n        dragonfly: false, fan: false, ladybird: false, leaf: false,\n        moth: false, rainbow: false, rose: false, sprout: false,\n        strawberry: false, sun: false, sunflower: false, worm: false\n    });\n\n    const [cardArray, updateArray] = useState([\n        {name: 'boot', img: boot}, {name: 'butterfly', img: butterfly},\n        {name: 'chick', img: chick}, {name: 'clover', img: clover},\n        {name: 'dragonfly', img: dragonfly}, {name: 'fan', img: fan},\n        {name: 'ladybird', img: ladybird}, {name: 'leaf', img: leaf},\n        {name: 'moth', img: moth}, {name: 'rainbow', img: rainbow},\n        {name: 'rose', img: rose}, {name: 'sprout', img: sprout},\n        {name: 'strawberry', img: strawberry}, {name: 'sun', img: sun},\n        {name: 'sunflower', img: sunflower}, {name: 'worm', img: worm}\n    ]);\n\n    const [scores, setScores] = useState({\n        currentScore: 0,\n        bestScore: 0\n    })\n\n    const [outcome, setOutcome] = useState({\n        lose: false,\n        win: false\n    })\n\n    const [message, setMessage] = useState('Click a card to start!')\n\n    function addScore(){\n        setScores({...scores, currentScore: scores.currentScore + 1});\n    }\n\n    function resetScore(){\n        setScores({...scores, currentScore: 0});\n    }\n\n    function resetCards(){\n        setCards({...cards, \n            boot: false, butterfly: false, chick: false, clover: false,\n            dragonfly: false, fan: false, ladybird: false, leaf: false,\n            moth: false, rainbow: false, rose: false, sprout: false,\n            strawberry: false, sun: false, sunflower: false, worm: false})\n    }\n\n    function updateMessage(result){\n        if(result === 'win'){\n        setMessage('You win!! Play again? Just click another card.')\n    } else {\n        setMessage('Oh no! You lose. Play again? Just click another card.')\n    }\n    }\n\n    function resetMessage(){\n        setMessage('')\n    }\n\n    function resetGame(){\n        resetCards();\n        resetScore();\n        setOutcome({...outcome, lose: false, win: false})\n    }\n\n    function resetAll(){\n        resetGame();\n        setScores({...scores, bestScore: 0, currentScore: 0});\n    }\n\n    function gameOver(result){\n        if (result === 'lose'){\n            updateMessage('lose');\n            if (scores.currentScore > scores.bestScore){\n                setScores({...scores, bestScore: scores.currentScore}); \n            }\n            setOutcome({...outcome, lose: true})\n        } else if (result === 'win') {\n            updateMessage('win');\n            if (scores.currentScore > scores.bestScore){\n                setScores({...scores, bestScore: scores.currentScore}); \n            }\n            setOutcome({...outcome, win: true})\n        }\n    }\n    \n    function checkWin() {\n        if(scores.currentScore === 16) {\n            gameOver('win');\n        }\n    }\n\n    function handleClick(card) {\n        resetMessage();\n        let selection = card.name;\n        if (cards[selection] === false) {\n            setCards({...cards, [card.name]: true})\n            addScore();\n        } else {\n           gameOver('lose');\n        }\n    }\n\n   useEffect(() => {\n        updateArray(cardArray.sort(() => Math.random() - 0.5));\n        if (outcome.lose === true || outcome.win === true){\n        resetGame();\n        }\n        checkWin();\n    });\n\n    return(\n        <div className=\"container\">\n                <MessageBoard message={message} />\n            <div className=\"cardContainer\">\n                {cardArray.map((card, index) =>\n                    <div key={index} className=\"card\" onClick={(event) => {handleClick(card)}}>\n                    <img className=\"cardImage\" src={card.img} alt={card.name}/>    \n                    <h4 className=\"cardName\" name={card.name}>\n                    {card.name} \n                    </h4>\n                    </div>)}\n            </div>\n            <div className=\"scoreBoard\">\n                <ScoreBoard currentScore={scores.currentScore} bestScore={scores.bestScore} />\n                <button className=\"reset\" onClick={resetAll}>\n                    Reset All Scores\n                </button>\n            </div>\n        </div>\n    )\n\n}\n","/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/Scoreboard.js",[],["32","33"],"/Volumes/Kaths working drive/web-projects/the_odin_project/02-javascript/memory-game/src/components/MessageBoard.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":119,"column":4,"nodeType":"40","endLine":119,"endColumn":13,"suggestions":"41"},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'updateArray'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cardArray, outcome.lose, outcome.win, checkWin, resetGame] as a second argument to the useEffect Hook.","Identifier",["46"],["44"],["45"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Add dependencies array: [cardArray, outcome.lose, outcome.win, checkWin, resetGame]",{"range":"49","text":"50"},[4301,4301],", [cardArray, outcome.lose, outcome.win, checkWin, resetGame]"]